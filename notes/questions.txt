Kristin's questions:
Idea 1
  What metrics to monitor? controller count, offline partition count, unclean leader elections/sec,bytes in/bytes out, number of partitions, latency, etc.

  What libraries will we use to display metrics? grafana and prometheus

  How customizable will the user interface be? as stretch feature very, else static

  What are the pros and cons of desktop vs web app? electron app may be more secure (prevents XSS), webb app may have more frequent updates

  What will be our demo app that uses kafka be like? We will use Docker to spin up a cluster and provide a dummy load from producer and consumer groups.

  What will our UI look like? 

  What are our user stories? Many Kafka monitoring services are costly are not fully customizable. We intend to provide a free, secure, and open source monitoring tool for independent developers or small companies that cannot afford to use costly services. 

  Which new technologies are essential? Docker, Kafka, Prometheus, Graphana, KafkaJS, Electron 

  What is our stretch feature hierarchy? Security/Encryption, fully customizable interface with as many metrics available as possible, alerts, cluster management.  

  What and how will we test? Jest, Supertest for integration tests, React Testing Library

  What do we anticipate as our biggest technical challenges? Interacting with Kafka clusters to extract metric data for prometheus. 

  Who will work on what? Zack/Joe Back End, Andrew/Ernesto Front End
  


Idea 2
  What are the unique technical challenges of working with producers and consumers?


Idea 3
  What will we be creating vs what will we be refactoring? Create SSR vs. CSR feature, refactor TypeScript and dependencies

  What is the hierarchy of our stretch goals? 

  What are the 20% problems? Full implementation of Typescript in an established code base without breaking the entire app. Expanding upon next.js integration to allow for latency analytics on SSR. Understanding the way front-end development affects search engines.